"""
Django settings for galatv project.

Generated by 'django-admin startproject' using Django 3.0.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import dotenv # For load enviroiment variables


dotenv.load_dotenv() # Load .env file with env vars

gettext = lambda s: s # For setting up django-cms
DATA_DIR = os.path.dirname(os.path.dirname(__file__)) # For setting up django-cms


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get('DJANGO_DEBUG') == 'True':
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS').split(' ')


# Application definition

INSTALLED_APPS = [
    # Django + Django CMS default modules
    'djangocms_admin_style',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.admin',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'cms',
    'menus',
    'sekizai',
    'treebeard',
    'djangocms_text_ckeditor',
    'filer',
    'easy_thumbnails',
    'djangocms_bootstrap4',
    'djangocms_bootstrap4.contrib.bootstrap4_alerts',
    'djangocms_bootstrap4.contrib.bootstrap4_badge',
    'djangocms_bootstrap4.contrib.bootstrap4_card',
    'djangocms_bootstrap4.contrib.bootstrap4_carousel',
    'djangocms_bootstrap4.contrib.bootstrap4_collapse',
    'djangocms_bootstrap4.contrib.bootstrap4_content',
    'djangocms_bootstrap4.contrib.bootstrap4_grid',
    'djangocms_bootstrap4.contrib.bootstrap4_jumbotron',
    'djangocms_bootstrap4.contrib.bootstrap4_link',
    'djangocms_bootstrap4.contrib.bootstrap4_listgroup',
    'djangocms_bootstrap4.contrib.bootstrap4_media',
    'djangocms_bootstrap4.contrib.bootstrap4_picture',
    'djangocms_bootstrap4.contrib.bootstrap4_tabs',
    'djangocms_bootstrap4.contrib.bootstrap4_utilities',
    'djangocms_file',
    'djangocms_icon',
    'djangocms_link',
    'djangocms_picture',
    'djangocms_style',
    'djangocms_snippet',
    'djangocms_googlemap',
    'djangocms_video',

    # My custom modules
    'colorfield',
    'multiselectfield',
    'fontawesome_5',
    'django_ckeditor_5',
    'captcha',
    'adminsortable2',
    'analytical',
    'django_summernote',
    'jet_django',

    # My apps
    'config', # Main app
    'apps.base.apps.BaseConfig', # Gallery App
    'apps.info', # Info App
    'apps.sections', # Sections App
    'apps.rates.apps.RatesConfig', # Rates App
    'apps.services.apps.ServicesConfig', # Services App
    'apps.news.apps.NewsConfig', # News App
    'apps.maps.apps.MapsConfig', # Maps App
    'apps.vacancies.apps.VacanciesConfig', # Vacancies App
    'apps.gallery.apps.GalleryConfig', # Gallery App
    'apps.mails.apps.MailsConfig' # Mails App
]


ROOT_URLCONF = 'config.urls'

SITE_ID = 1

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/' # URL for templates

if os.environ.get('DJANGO_STATIC_ROOT'):
    STATIC_ROOT = os.environ.get('DJANGO_STATIC_ROOT')

else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Implified static file serving.
# https://warehouse.python.org/project/whitenoise/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static_dev")
]

MEDIA_URL = '/media/'

if os.environ.get('DJANGO_MEDIA_ROOT'):
    MEDIA_ROOT = os.environ.get('DJANGO_MEDIA_ROOT')
    
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.template.context_processors.csrf',
                'django.template.context_processors.tz',
                'sekizai.context_processors.sekizai',
                'django.template.context_processors.static',
                'cms.context_processors.cms_settings'
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader'
            ],
        },
    },
]


MIDDLEWARE = [
    'cms.middleware.utils.ApphookReloadMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',
]

LANGUAGES = (
    ('ru', gettext('ru')),
)

CMS_LANGUAGES = {
    1: [
        {
            'code': 'ru',
            'name': gettext('ru'),
            'redirect_on_fallback': True,
            'public': True,
            'hide_untranslated': False,
        },
    ],
    'default': {
        'redirect_on_fallback': True,
        'public': True,
        'hide_untranslated': False,
    },
}

CMS_TEMPLATES = (
    ('home/index.html', 'Домашняя Страница'),
    ('page/page_view.html', 'Стандартная страница'),
    ('forms/connect.html', 'Страница формы заявок'),
)

X_FRAME_OPTIONS = 'ALLOW-FROM http://webvisor.com/'

CMS_PERMISSION = True

if os.environ.get('DJANGO_USE_DB') == 'True':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DJANGO_DB_NAME'),
            'USER': os.environ.get('DJANGO_DB_USER'),
            'PASSWORD': os.environ.get('DJANGO_DB_PASSWORD'),
            'HOST': os.environ.get('DJANGO_DB_HOST', 'localhost'),
        }
    }
else:
    DATABASES = {
        'default': {
            'CONN_MAX_AGE': 0,
            'ENGINE': 'django.db.backends.sqlite3',
            'HOST': 'localhost',
            'NAME': os.path.join(BASE_DIR, '../galatv.sqlite3'),
        }
    }

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters'
)

# Default Logging - only django
if os.environ.get('DJANGO_LOGGING') == 'True':
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
                'datefmt' : "%d/%b/%Y %H:%M:%S"
            },

            'simple': {
                'format': '%(levelname)s %(message)s'
            },

        },

        'handlers': {
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': os.environ.get('DJANGO_LOGGING_FILE', 'galatv.log'),
                'formatter': 'verbose'
            },

        },

        'loggers': {
            'django': {
                'handlers':['file'],
                'propagate': True,
                'level':'DEBUG',
            }

        }

    }

# Rates App
RATE_CONNECT_REQUEST_STATUS_CHOICES = [ # Статусы Заявок на подключения к интернету
    ('UNREAD', 'Не прочитанно'), # Не протианно администрацией
    ('READ', 'Прочитанно'), # Протианно администрацией
    ('SUCCESS', 'Выполненно'), # Выполненно
]

# Service App
SERVICE_REQUEST_STATUS_CHOICES = [ # Статусы Заявок на оказание услуги
    ('UNREAD', 'Не прочитанно'), # Не протианно администрацией
    ('READ', 'Прочитанно'), # Протианно администрацией
    ('SUCCESS', 'Выполненно'), # Выполненно
]

# News App
COUNT_NEWS_ON_MAIN_PAGE = 3 # Количество новостей на главной странице
NEWS_DEFAULT_IMAGE_PATH = '/news/default_news_image.jpg' # Путь до дефолтной картинки для новости, относительно media
NEWS_ALLOW_COMMENTS = False

# Vacancies App
VACANCY_REQUEST_STATUS_CHOICES = [ # Статусы Заявок на вакансию
    ('UNREAD', 'Не прочитанно'), # Не протианно администрацией
    ('READ', 'Прочитанно'), # Протианно администрацией
]

# Gallery App
GALLERY_IMAGES_ON_MAIN_PAGE_COUNT = 6 # Кол-во фотографий галереи на главной странице

# Settings for all requests
CONNECT_REQUEST_NAME_OF_MAILING_TYPES_CHOICES = 'ConnectRequest'
SERVICE_REQUEST_NAME_OF_MAILING_TYPES_CHOICES = 'ServiceRequest'
VACANCY_REQUEST_NAME_OF_MAILING_TYPES_CHOICES = 'VacancyRequest'

# Mails app
MAILINGS_TYPES_CHOICES = [ # Список типов рассылок на какие-либо заявки от пользователя
    ('ConnectRequest', 'При создании заявок на подключение интернета или ТВ'),
    ('ServiceRequest', 'При создании заявок на оказание услуг'),
    ('VacancyRequest', 'При создании заявок на вакансии')
]

if os.environ.get('DJANGO_MAILS_USE') == 'True':
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

    EMAIL_HOST = os.environ.get('DJANGO_MAILS_HOST')
    EMAIL_PORT = os.environ.get('DJANGO_MAILS_PORT')

    if os.environ.get('DJANGO_MAILS_USE_TLS') == 'True':
        EMAIL_USE_TLS = True
    else:
        EMAIL_USE_TLS = False

    if os.environ.get('DJANGO_MAILS_USE_SSL') == 'True':
        EMAIL_USE_SSL = True
    else:
        EMAIL_USE_SSL = False

    if EMAIL_USE_TLS and EMAIL_USE_SSL:
        raise ValueError('DJANGO_MAILS_USE_TLS and DJANGO_MAILS_USE_SSL are both equl True, which cannot be, please edit you .env configuration file.')

    EMAIL_HOST_MAIL_ADDRESS = os.environ.get('DJANGO_MAILS_EMAIL_ADDRESS')
    DEFAULT_FROM_EMAIL = EMAIL_HOST_MAIL_ADDRESS
    SERVER_EMAIL = EMAIL_HOST_MAIL_ADDRESS

    if os.environ.get('DJANGO_MAILS_USER') != '':
        EMAIL_HOST_USER = os.environ.get('DJANGO_MAILS_USER')

    if os.environ.get('DJANGO_MAILS_PASSWORD') != '':
        EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_MAILS_PASSWORD')

    EMAIL_FAIL_SILENTLY = True

# Base App
PAGE_DEFAULT_IMAGE_PATH = '/page/default_page_image.jpg'

SEARCH_PLUGIN_INDEXING_PAGES_CHOICES = ( # Разделы, по которым будет происходить поиск (Тарифы, Услуги, Новости, Вакансии, Галерея)
    ('rates', 'Тарифы'),
    ('services', 'Услуги'),
    ('news', 'Новости'),
    ('vacancies', 'Вакансии'),
    ('gallery', 'Галерея'),
)

# Font Awesome 5
FONTAWESOME_5_CSS = None
FONTAWESOME_5_CSS_ADMIN = None
FONTAWESOME_5_ICON_CLASS = 'default'
FONTAWESOME_5_PREFIX = 'fa'


# Ckeditor 5 Configuration
customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]

CKEDITOR_5_CONFIGS = {
    'default': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote', 'imageUpload'
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
        'code','subscript', 'superscript', 'highlight', '|',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', 'imageTitle', '|', 'imageStyle:alignLeft', 'imageStyle:full',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    }
}


# Disable page, placeholders and plugins cache
# That fix bags with context.request not updates, when function render() calls not always

CMS_PAGE_CACHE = False
CMS_PLACEHOLDER_CACHE = False
CMS_PLUGIN_CACHE = False


# Django-recaptcha Settigns

RECAPTCHA_PUBLIC_KEY = os.environ.get('DJANGO_RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = os.environ.get('DJANGO_RECAPTCHA_PRIVATE_KEY')


# Yandex Metrica via django-analytical

YANDEX_METRICA_COUNTER_ID = os.environ.get('DJANGO_YANDEX_METRICA_COUNTER_ID')
YANDEX_METRICA_WEBVISOR = True

# Jet-Django Settings
JET_PROJECT = 'gala_tv'
JET_TOKEN = '9c8198c2-5b1b-4460-a8fd-36a318c8703c'